
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  purchases Purchase[]
  reviews   Review[]
  comments  Comment[]
  orders    Order[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  image_url String?
  date_time DateTime @default(now())
}


model Product {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  date_time DateTime   @default(now())

  sizes       Size[]   
  colors      Color[]
  reviews     Review[]
  comments    Comment[]
  purchases   Purchase[]
  orderItems  OrderItem[]
}

model Size {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  size        String
  price       Float
}

model Color {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  color       String
  image_url   String?
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  title     String
  image_url String
  price     Float
  quantity  Int?
  color     String?
  size      String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  userId    String
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  date_time DateTime @default(now())
}


model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  protocol    String      @unique
  userId      String?
  user        User?        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  totalPrice  Float       // Pre√ßo total do pedido
  status String @default("Pendente")

}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String
  productId   String?
  title       String
  quantity    Int
  color       String
  size        String
  price       Float
  totalPrice Float
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  order       Order    @relation(fields: [orderId], references: [id])
}
