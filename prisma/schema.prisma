
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  purchases Purchase[]
  reviews   Review[] // Relacionamento com Reviews
  comments  Comment[] // Relacionamento com Comments
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  image_url String?
  date_time DateTime @default(now())
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  productId String
  quantity  Int?      // Quantidade comprada
  color     String?  // Cor escolhida pelo usuário
  size      String?  // Tamanho escolhido pelo usuário
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  title     String
  image_url String
  price     Float
  createdAt DateTime @default(now())
}

model Product {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  image_url String?
  price     Float
  quantity  Int?        // Quantidade de unidades disponíveis
  color     String?    // Cor do produto (ou pode ser uma lista de opções)
  size      String?    // Tamanho do produto (ou pode ser uma lista de opções)
  date_time DateTime   @default(now())
  reviews   Review[]   // Relacionamento com Reviews
  comments  Comment[]  // Relacionamento com Comments
  purchases Purchase[] // Relacionamento com Purchases
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String? // Comentário adicional ao rating
  userId    String // Associar o Review a um User
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  date_time DateTime @default(now())
}
